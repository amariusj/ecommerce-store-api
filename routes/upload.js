const router = require('express').Router()
const cloudinary = require('cloudinary')
const auth = require('../middleware/auth')
const authAdmin = require('../middleware/authAdmin')
const fs = require('fs')


// Configure cloudinary to our account
cloudinary.config({
   cloud_name: process.env.CLOUD_NAME,
   api_key: process.env.CLOUD_API_KEY,
   api_secret: process.env.CLOUD_API_SECRET
})

// Upload image
router.post('/upload', auth, authAdmin, async (req, res) => {
    try {

        // Verify a file was uploaded
        if (!req.files || Object.keys(req.files).length === 0)
            return res.status(400).json({msg: "No files were uploaded."})

        // Grab the uploaded file and set it to a variable
        const { file } = req.files

        // Verify file size is not too large (5mb max)
        if (file.size > 1024 * 1024 * 5) {
            // If file is too large, remove it then send an error
            removeTmpFile(file.tempFilePath)
            return res.status(400).json({msg: "File size is too large. 5mb is the limit."})
        }

        // Verify file is a jpeg, png, or jpg file
        if (file.mimetype !== 'image/jpeg' && file.mimetype !== 'image/png' && file.mimetype !== 'image/jpg') {
            // If file is wrong type, remove it then send an error
            removeTmpFile(file.tempFilePath)
            return res.status(400).json({msg: "Uploaded file format is not supported"})
        }

        // Upload the image to cloudinary and specify a folder to host it in
        cloudinary.v2.uploader.upload(file.tempFilePath, {folder: "ecommerce-store"}, async (err, result) => {
            if (err) throw err 

            // If upload was successful, remove the temporary file
            removeTmpFile(file.tempFilePath)
            
            // return the public id and url for
            // the image that was generated by cloudinary
            return res.status(200).json({public_id: result.public_id, url: result.url})
        })
        
    } catch (err) {
        return res.status(500).json({msg: err.message})
    }
})

// Delete image
router.post('/destroy', auth, authAdmin, async (req, res) => {
    try {

        // Grab ID of image from cloudinary through request
        const { public_id } = req.body

        // If the public ID does not exist, send an error stating
        // no images are selected
        if (!public_id) return res.status(400).json({msg: "No images selected"})

        // Destroy the image
        cloudinary.v2.uploader.destroy(public_id, async (err, result) => {
            if (err) throw err

            return res.json({msg: "Image deleted"})
        })

    } catch (err) {
        return res.status(500).json({msg: err.message})
    }
})

// Creates a function that removes the temporary file uploaded
const removeTmpFile = (path) => {
    
    // use FileShare to find and remove the file
    fs.unlink(path, err => {
        if (err) throw err
    })

}

module.exports = router